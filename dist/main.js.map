{"mappings":"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","sources":["src/index.ts"],"sourcesContent":["import axios, { AxiosInstance } from \"axios\";\r\nimport Cookies from 'js-cookie';\r\nimport jwtDecode from 'jwt-decode';\r\nimport { paths } from \"./hiddb\";\r\n\r\ntype JWT = {\r\n  sub: string,\r\n  amr: [string],  // possible values: password, refresh_token, otp\r\n  scope: string,\r\n  email: string,\r\n  email_verified: boolean,\r\n  role: string,\r\n  plan: string,\r\n  organization: string,\r\n  iat: number,\r\n  exp: number,\r\n};\r\n\r\ntype Events =\r\n  ({ type: 'login' } & CustomEvent<JWT>) |\r\n  ({ type: 'logout' } & Event) |\r\n  ({ type: 'databaseCreated' } & Event) |\r\n  ({ type: 'databaseDeleted' } & Event) |\r\n  ({ type: 'instanceCreated' } & Event) |\r\n  ({ type: 'instanceDeleted' } & Event) |\r\n  ({ type: 'collectionCreated' } & Event) |\r\n  ({ type: 'collectionDeleted' } & Event) |\r\n  ({ type: 'indexCreated' } & Event) |\r\n  ({ type: 'indexDeleted' } & Event);\r\n\r\nclass State {\r\n  private hiddb: HIDDB;\r\n  private _accessToken?: string = '';\r\n  private _decoded?: JWT;\r\n  private _refresh?: number;\r\n\r\n  private _key?: string;\r\n  private _secret?: string;\r\n\r\n  constructor(hiddb: HIDDB, key?: string, secret?: string) {\r\n    this.hiddb = hiddb;\r\n    this._key = key;\r\n    this._secret = secret;\r\n  }\r\n\r\n  get accessToken() {\r\n    return this._accessToken;\r\n  }\r\n\r\n  get machineKey() {\r\n    return this._key;\r\n  }\r\n\r\n  get machineSecret() {\r\n    return this._secret;\r\n  }\r\n\r\n  set accessToken(accessToken) {\r\n    if (accessToken === undefined) {\r\n      this._accessToken = accessToken;\r\n      return;\r\n    }\r\n\r\n    this._decoded = jwtDecode(accessToken) as JWT;\r\n    if (!this._accessToken && accessToken) {\r\n      if (typeof CustomEvent !== 'undefined') {\r\n        // @ts-expect-error\r\n        this.hiddb.dispatchEvent(new CustomEvent('login', {\r\n          detail: JSON.parse(JSON.stringify(this._decoded))\r\n        }));\r\n      }\r\n    }\r\n    this._accessToken = accessToken;\r\n\r\n    if (typeof window !== 'undefined') {\r\n      // try to refresh one minute before expiry\r\n      if (this._refresh) window.clearTimeout(this._refresh);\r\n      this._refresh = window.setTimeout(() => this.refreshToken(), this._decoded.exp * 1000 - Date.now() - 60000);\r\n    } else {\r\n      if (this._refresh) clearTimeout(this._refresh);\r\n      this._refresh = setTimeout(() => this.refreshToken(), this._decoded.exp * 1000 - Date.now() - 60000);\r\n    }\r\n  }\r\n\r\n  private async refreshToken() {\r\n    if (this.machineKey && this.machineSecret) {\r\n      await this.hiddb.machineLogin(this.machineKey, this.machineSecret);\r\n      return;\r\n    }\r\n    await this.hiddb.userRefresh();\r\n  }\r\n}\r\n\r\nexport class HIDDB extends EventTarget {\r\n  private state: State;\r\n  private axios: AxiosInstance;\r\n  private client: AxiosInstance;\r\n  private dbDomain: string;\r\n\r\n  constructor(params: { key?: string, secret?: string, apiDomain?: string, dbDomain?: string, secure?: boolean}) {\r\n    super();\r\n    this.state = new State(this, params.key, params.secret);\r\n\r\n    this.axios = axios.create();\r\n    this.axios.defaults.headers.post['Content-Type'] = 'application/json';\r\n    this.axios.interceptors.request.use(\r\n      (config) => {\r\n        return {\r\n          ...config,\r\n          headers: this.state.accessToken ? {\r\n            ...(config.headers ?? {}),\r\n            Authorization: `Bearer ${this.state.accessToken}`,\r\n          } : config.headers,\r\n        };\r\n      },\r\n      (error) => {\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n\r\n    this.dbDomain = params.dbDomain;\r\n    this.client = axios.create({\r\n      baseURL: `${params.secure ? 'https' : 'http' }://api.${params.apiDomain}`,\r\n      timeout: 30000\r\n    });\r\n    this.client.defaults.headers.post['Content-Type'] = 'application/json';\r\n    this.client.interceptors.request.use(\r\n      (config) => {\r\n        return {\r\n          ...config,\r\n          headers: this.state.accessToken ? {\r\n            ...(config.headers ?? {}),\r\n            Authorization: `Bearer ${this.state.accessToken}`,\r\n          } : config.headers,\r\n        };\r\n      },\r\n      (error) => {\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  public dispatchEvent<\r\n    T extends Events['type'],\r\n    E extends Events & { type: T }\r\n  >(event: E): boolean {\r\n    return super.dispatchEvent(event);\r\n  }\r\n\r\n  public addEventListener<\r\n    T extends Events['type'],\r\n    E extends Events & { type: T }\r\n  >(type: T, callback: ((e: E) => void) | { handleEvent: (e: E) => void } | null): void {\r\n    return super.addEventListener(type, callback as EventListenerOrEventListenerObject);\r\n  }\r\n\r\n  public removeEventListener(type: Events['type']) {\r\n    super.removeEventListener(type, null)\r\n  }\r\n\r\n  isAuthenticated() {\r\n    return Boolean(this.state.accessToken);\r\n  }\r\n\r\n  async logout() {\r\n    this.state.accessToken = undefined;\r\n    if (!this.state.machineKey || !this.state.machineSecret) {\r\n      const path = \"/user/logout\" as const;\r\n      const method = \"post\" as const;\r\n\r\n      await this.client[method]<\r\n        paths[typeof path][typeof method][\"responses\"][\"200\"]\r\n      >(path, undefined, { withCredentials: true });\r\n    }\r\n\r\n    // @ts-expect-error\r\n    this.dispatchEvent(new Event('logout'));\r\n  }\r\n\r\n  async userRegister(email: string, password: string) {\r\n    const path = \"/user/register\" as const;\r\n    const method = \"post\" as const;\r\n\r\n    const body: paths[typeof path][typeof method][\"requestBody\"][\"content\"][\"application/json\"] =\r\n    {\r\n      email,\r\n      password,\r\n    };\r\n\r\n    const response = await this.client[method]<\r\n      paths[typeof path][typeof method][\"responses\"][\"200\"]\r\n    >(path, body);\r\n\r\n    return response.data\r\n  }\r\n\r\n  async userUpdateVerify(userId: string, otp: string) {\r\n    const path = \"/user/update/verify\" as const;\r\n    const method = \"post\" as const;\r\n\r\n    const body: paths[typeof path][typeof method][\"requestBody\"][\"content\"][\"application/json\"] =\r\n    {\r\n      user_id: userId,\r\n      otp: otp,\r\n    };\r\n\r\n    const response = await this.client[method]<\r\n      paths[typeof path][typeof method][\"responses\"][\"200\"]\r\n    >(path, body);\r\n\r\n    return response.data\r\n  }\r\n\r\n  async userResetPassword(email: string) {\r\n    const path = \"/user/reset\" as const;\r\n    const method = \"post\" as const;\r\n\r\n    const body: paths[typeof path][typeof method][\"requestBody\"][\"content\"][\"application/json\"] =\r\n    {\r\n      email,\r\n    };\r\n\r\n    const response = await this.client[method]<\r\n      paths[typeof path][typeof method][\"responses\"][\"200\"]\r\n    >(path, body);\r\n\r\n    return response.data\r\n  }\r\n\r\n  async userUpdateResetPassword(userId: string, otp: string, password: string) {\r\n    const path = \"/user/update/reset\" as const;\r\n    const method = \"post\" as const;\r\n\r\n    const body: paths[typeof path][typeof method][\"requestBody\"][\"content\"][\"application/json\"] =\r\n    {\r\n      user_id: userId,\r\n      otp: otp,\r\n      password\r\n    };\r\n\r\n    const response = await this.client[method]<\r\n      paths[typeof path][typeof method][\"responses\"][\"200\"]\r\n    >(path, body);\r\n    return response.data\r\n  }\r\n\r\n  async userLogin(email: string, password: string) {\r\n    const path = \"/user/login\" as const;\r\n    const method = \"post\" as const;\r\n\r\n    const body: paths[typeof path][typeof method][\"requestBody\"][\"content\"][\"application/json\"] =\r\n    {\r\n      email,\r\n      password,\r\n    };\r\n\r\n    const response = await this.client[method]<\r\n      paths[typeof path][typeof method][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\n    >(path, body, { withCredentials: true });\r\n\r\n    // update accessToken\r\n    this.state.accessToken = response.data.access_token;\r\n  }\r\n\r\n  async userRefresh() {\r\n    const path = \"/user/refresh\" as const;\r\n    const method = \"post\" as const;\r\n\r\n    const response = await this.client[method]<\r\n      paths[typeof path][typeof method][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\n    >(path, {}, { withCredentials: true });\r\n\r\n    // update accessToken\r\n    this.state.accessToken = response.data.access_token;\r\n  }\r\n\r\n  async machineLogin(key: string, secret: string) {\r\n    const path = \"/machine/login\" as const;\r\n    const method = \"post\" as const;\r\n\r\n    const body: paths[typeof path][typeof method][\"requestBody\"][\"content\"][\"application/json\"] =\r\n    {\r\n      access_key: key,\r\n      secret_key: secret,\r\n    };\r\n\r\n    const response = await this.client[method]<\r\n      paths[typeof path][typeof method][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\n    >(path, body);\r\n\r\n    // update accessToken\r\n    this.state.accessToken = response.data.access_token;\r\n  }\r\n\r\n  async createMachineAccount(machineName: string, permission: \"read\" | \"write\" | \"admin\") {\r\n    const path = \"/machine\" as const;\r\n    const method = \"post\" as const;\r\n\r\n    const body: paths[typeof path][typeof method][\"requestBody\"][\"content\"][\"application/json\"] =\r\n    {\r\n      machine_name: machineName,\r\n      permission\r\n    };\r\n\r\n    const response = await this.client[method]<\r\n      paths[typeof path][typeof method][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\n    >(`/machine`, body);\r\n\r\n    return response.data\r\n  }\r\n\r\n  async getMachineAccounts() {\r\n    const path = \"/machine\" as const;\r\n    const method = \"get\" as const;\r\n\r\n    const response = await this.client[method]<\r\n      paths[typeof path][typeof method][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\n    >(`/machine`);\r\n\r\n    return response.data\r\n  }\r\n\r\n  async deleteMachineAccount(machineId: string) {\r\n    const path = \"/machine/{machine_id}\" as const;\r\n    const method = \"delete\" as const;\r\n\r\n    const response = await this.client[method]<\r\n      paths[typeof path][typeof method][\"responses\"][\"200\"]\r\n    >(`/machine/${machineId}`);\r\n\r\n    return response.data\r\n  }\r\n\r\n  async createDatabase(name: string, instances: [{ type: \"xs\" | \"s\" | \"m\" | \"l\" | \"xl\", volume_size: number }]) {\r\n    const path = \"/database\" as const;\r\n    const method = \"post\" as const;\r\n    const body: paths[typeof path][typeof method][\"requestBody\"][\"content\"][\"application/json\"] = {\r\n      database_name: name,\r\n      instances\r\n    };\r\n\r\n    const response = await this.client[method]<\r\n      paths[typeof path][typeof method][\"responses\"][\"202\"][\"content\"][\"application/json\"]\r\n    >(path, body);\r\n\r\n    // @ts-expect-error\r\n    this.dispatchEvent(new Event('databaseCreated'));\r\n\r\n    return response.data;\r\n  }\r\n\r\n  async listDatabases() {\r\n    const path = \"/database\" as const;\r\n    const method = \"get\" as const;\r\n\r\n    const response = await this.client[method]<\r\n      paths[typeof path][typeof method][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\n    >(path);\r\n\r\n    return response.data;\r\n  }\r\n\r\n  async getDatabase(id: string) {\r\n    const path = `/database/${id}` as const;\r\n    const method = \"get\" as const;\r\n\r\n    const response = await this.client[method]<\r\n      paths['/database/{database_id}'][typeof method][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\n    >(path);\r\n\r\n    return response.data;\r\n  }\r\n\r\n  async deleteDatabase(id: string) {\r\n    const path = `/database/${id}` as const;\r\n    const method = \"delete\" as const;\r\n\r\n    const response = await this.client[method]<\r\n      paths['/database/{database_id}'][typeof method][\"responses\"][\"202\"][\"content\"][\"application/json\"]\r\n    >(path);\r\n\r\n    // @ts-expect-error\r\n    this.dispatchEvent(new Event('databaseDeleted'));\r\n\r\n    return response.data;\r\n  }\r\n\r\n  async createInstance(id: string, volume_size: number, type: \"xs\" | \"s\" | \"m\" | \"l\" | \"xl\") {\r\n    const path = \"/instance\" as const;\r\n    const method = \"post\" as const;\r\n    const body: paths[typeof path][typeof method][\"requestBody\"][\"content\"][\"application/json\"] = {\r\n      database_id: id,\r\n      volume_size,\r\n      type\r\n    };\r\n\r\n    const response = await this.client[method]<\r\n      paths[typeof path][typeof method][\"responses\"][\"202\"][\"content\"][\"application/json\"]\r\n    >(path, body);\r\n\r\n    // @ts-expect-error\r\n    this.dispatchEvent(new Event('instanceCreated'));\r\n\r\n    return response.data;\r\n  }\r\n\r\n  async listInstances() {\r\n    const path = \"/instance\" as const;\r\n    const method = \"get\" as const;\r\n\r\n    const response = await this.client[method]<\r\n      paths[typeof path][typeof method][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\n    >(path);\r\n\r\n    return response.data;\r\n  }\r\n\r\n  async getInstance(id: string) {\r\n    const path = `/instance/${id}` as const;\r\n    const method = \"get\" as const;\r\n\r\n    const response = await this.client[method]<\r\n      paths['/instance/{instance_id}'][typeof method][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\n    >(path);\r\n\r\n    return response.data;\r\n  }\r\n\r\n  async deleteInstance(id: string) {\r\n    const path = `/database/${id}` as const;\r\n    const method = \"delete\" as const;\r\n\r\n    const response = await this.client[method]<\r\n      paths['/instance/{instance_id}'][typeof method][\"responses\"][\"202\"][\"content\"][\"application/json\"]\r\n    >(path);\r\n\r\n    // @ts-expect-error\r\n    this.dispatchEvent(new Event('instanceDeleted'));\r\n\r\n    return response.data;\r\n  }\r\n\r\n\r\n  async createCollection(databaseId: string, name: string) {\r\n    const path = \"/collection\" as const;\r\n    const method = \"post\" as const;\r\n    const body: paths[typeof path][typeof method][\"requestBody\"][\"content\"][\"application/json\"] = {\r\n      collection_name: name\r\n    };\r\n\r\n    const response = await this.axios[method]<\r\n      paths[typeof path][typeof method][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\n    >(`https://${databaseId}.${this.dbDomain}${path}`, body);\r\n\r\n    // @ts-expect-error\r\n    this.dispatchEvent(new Event('collectionCreated'));\r\n\r\n    return response.data;\r\n  }\r\n\r\n  async listCollections(databaseId: string) {\r\n    const path = \"/collection\" as const;\r\n    const method = \"get\" as const;\r\n\r\n    const response = await this.axios[method]<\r\n      paths[typeof path][typeof method][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\n    >(`https://${databaseId}.${this.dbDomain}${path}`);\r\n\r\n    return response.data;\r\n  }\r\n\r\n\r\n  async getCollection(databaseId: string, name: string) {\r\n    const path = `/collection/${name}` as const;\r\n    const method = \"get\" as const;\r\n\r\n    const response = await this.axios[method]<\r\n      paths['/collection/{collection_name}'][typeof method][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\n    >(`https://${databaseId}.${this.dbDomain}${path}`);\r\n\r\n    return response.data;\r\n  }\r\n\r\n  async deleteCollection(databaseId: string, name: string) {\r\n    const path = `/collection/${name}` as const;\r\n    const method = \"delete\" as const;\r\n\r\n    const response = await this.axios[method]<\r\n      paths['/collection/{collection_name}'][typeof method][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\n    >(`https://${databaseId}.${this.dbDomain}${path}`);\r\n\r\n    // @ts-expect-error\r\n    this.dispatchEvent(new Event('collectionDeleted'));\r\n\r\n    return response.data;\r\n  }\r\n\r\n  async createIndex(databaseId: string, collection_name: string, field_name: string, dimension: number) {\r\n    const rawPath = \"/collection/{collection_name}/index\" as const;\r\n    const path = `/collection/${collection_name}/index` as const;\r\n    const method = \"post\" as const;\r\n    const body: paths[typeof rawPath][typeof method][\"requestBody\"][\"content\"][\"application/json\"] = {\r\n      field_name: field_name,\r\n      dimension\r\n    };\r\n\r\n    const response = await this.axios[method]<\r\n      paths[typeof rawPath][typeof method][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\n    >(`https://${databaseId}.${this.dbDomain}${path}`, body);\r\n\r\n    // @ts-expect-error\r\n    this.dispatchEvent(new Event('indexCreated'));\r\n\r\n    return response.data;\r\n  }\r\n\r\n  async listIndices(databaseId: string, collection_name: string) {\r\n    const rawPath = \"/collection/{collection_name}/index\" as const;\r\n    const path = `/collection/${collection_name}/index` as const;\r\n    const method = \"get\" as const;\r\n\r\n    const response = await this.axios[method]<\r\n      paths[typeof rawPath][typeof method][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\n    >(`https://${databaseId}.${this.dbDomain}${path}`);\r\n\r\n    return response.data;\r\n  }\r\n\r\n\r\n  async getIndex(databaseId: string, collection_name: string, index_name: string) {\r\n    const rawPath = \"/collection/{collection_name}/index/{field_name}\" as const;\r\n    const path = `/collection/${collection_name}/index/${index_name}` as const;\r\n    const method = \"get\" as const;\r\n\r\n    const response = await this.axios[method]<\r\n      paths[typeof rawPath][typeof method][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\n    >(`https://${databaseId}.${this.dbDomain}${path}`);\r\n\r\n    return response.data;\r\n  }\r\n\r\n  async deleteIndex(databaseId: string, collection_name: string, index_name: string) {\r\n    const rawPath = \"/collection/{collection_name}/index/{field_name}\" as const;\r\n    const path = `/collection/${collection_name}/index/${index_name}` as const;\r\n    const method = \"delete\" as const;\r\n\r\n    const response = await this.axios[method]<\r\n      paths[typeof rawPath][typeof method][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\n    >(`https://${databaseId}.${this.dbDomain}${path}`);\r\n\r\n    // @ts-expect-error\r\n    this.dispatchEvent(new Event('indexDeleted'));\r\n\r\n    return response.data;\r\n  }\r\n\r\n\r\n  async insertDocument(databaseId: string, collection_name: string, document: { id: string, [key: string]: string }) {\r\n    const rawPath = \"/collection/{collection_name}/document\" as const;\r\n    const path = `/collection/${collection_name}/document` as const;\r\n    const method = \"post\" as const;\r\n    const body: paths[typeof rawPath][typeof method][\"requestBody\"][\"content\"][\"application/json\"] = {\r\n      documents: [document]\r\n    };\r\n\r\n    const response = await this.axios[method]<\r\n      paths[typeof rawPath][typeof method][\"responses\"][\"200\"]\r\n    >(`https://${databaseId}.${this.dbDomain}${path}`, body);\r\n\r\n    return response.data;\r\n  }\r\n\r\n  async searchNearestDocuments(databaseId: string, collection_name: string, vector: [number], field_name: string, max_neighbors: number) {\r\n    const rawPath = \"/collection/{collection_name}/document/search\" as const;\r\n    const path = `/collection/${collection_name}/document/search` as const;\r\n    const method = \"post\" as const;\r\n    const body: paths[typeof rawPath][typeof method][\"requestBody\"][\"content\"][\"application/json\"] = {\r\n      vectors: [vector],\r\n      field_name: field_name,\r\n      max_neighbors: max_neighbors\r\n    };\r\n\r\n    const response = await this.axios[method]<\r\n      paths[typeof rawPath][typeof method][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\n    >(`https://${databaseId}.${this.dbDomain}${path}`, body);\r\n\r\n    return response.data;\r\n  }\r\n\r\n  async getDocument(databaseId: string, collection_name: string, id: string) {\r\n    const rawPath = \"/collection/{collection_name}/document/{document_id}\" as const;\r\n    const path = `/collection/${collection_name}/document/${id}` as const;\r\n    const method = \"get\" as const;\r\n\r\n    const response = await this.axios[method]<\r\n      paths[typeof rawPath][typeof method][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\n    >(`https://${databaseId}.${this.dbDomain}${path}`);\r\n\r\n    return response.data;\r\n  }\r\n\r\n  async deleteDocument(databaseId: string, collection_name: string, id: string) {\r\n    const rawPath = \"/collection/{collection_name}/document/{document_id}\" as const;\r\n    const path = `/collection/${collection_name}/document/${id}` as const;\r\n    const method = \"delete\" as const;\r\n\r\n    const response = await this.axios[method]<\r\n      paths[typeof rawPath][typeof method][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\n    >(`https://${databaseId}.${this.dbDomain}${path}`);\r\n\r\n    return response.data;\r\n  }\r\n}\r\n"],"names":[],"version":3,"file":"main.js.map"}