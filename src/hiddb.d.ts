/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/machine/login": {
    /** Machine login using access and secret token. */
    post: operations["machineLogin"];
  };
  "/machine": {
    /** Get all machines in organization */
    get: operations["getMachines"];
    /** Create a new machine account. */
    post: operations["createMachine"];
  };
  "/machine/{machine_id}": {
    /** Delete machine account */
    delete: operations["deleteMachine"];
    parameters: {
      path: {
        /** The ID of the machine */
        machine_id: string;
      };
    };
  };
  "/database": {
    /** Get information about databases */
    get: operations["listDatabase"];
    /** Create new database. */
    post: operations["createDatabase"];
  };
  "/database/{database_id}": {
    /** Get information about specific database */
    get: operations["getDatabase"];
    /** Delete a specific database */
    delete: operations["deleteDatabase"];
    parameters: {
      path: {
        /** The ID of the database */
        database_id: string;
      };
    };
  };
  "/instance": {
    /** Get information about instances */
    get: operations["listInstances"];
    /** Create new instance. Currently you can only create a single instance per database. In future versions we will not restrict the number of instances per database. */
    post: operations["createInstance"];
  };
  "/instance/{instance_id}": {
    /** Get information about specific instance */
    get: operations["getInstance"];
    /** Delete a specific Instance */
    delete: operations["deleteInstance"];
    parameters: {
      path: {
        /** The ID of the instance */
        instance_id: string;
      };
    };
  };
  "/collection": {
    /** Get information about collections */
    get: operations["listCollections"];
    /** Create new collection */
    post: operations["createCollection"];
  };
  "/collection/{collection_name}": {
    /** Get information about a specific collection */
    get: operations["getCollection"];
    /** Delete a specific collection */
    delete: operations["deleteCollection"];
  };
  "/collection/{collection_name}/index": {
    /** Get information about an existing indices */
    get: operations["listIndices"];
    /** Create new index in the specified collection */
    post: operations["createIndex"];
    parameters: {
      path: {
        /** The ID of the collection */
        collection_name: string;
      };
    };
  };
  "/collection/{collection_name}/index/{index_name}": {
    /** Get information about specific index */
    get: operations["getIndex"];
    /** Delete index */
    delete: operations["deleteIndex"];
    parameters: {
      path: {
        /** The ID of the collection */
        collection_name: string;
        /** The ID of the index */
        index_name: string;
      };
    };
  };
  "/collection/{collection_name}/document": {
    /** Insert document. The field "index_name" can be indexed by an index with the same name */
    post: operations["insertDocuments"];
    parameters: {
      path: {
        /** The ID of the collection */
        collection_name: string;
      };
    };
  };
  "/collection/{collection_name}/document/search": {
    /** Search for nearest vectors to specified vector. Instead of specifying `vector: <array>` you can search for similar documents directly by setting `id: <document_id>` instead */
    post: operations["getAnn"];
    parameters: {
      path: {
        /** The ID of the collection */
        collection_name: string;
      };
    };
  };
  "/collection/{collection_name}/document/{document_id}": {
    /** Get document by ID */
    get: operations["getDocument"];
    /** Remove document by ID. The document is deleted from the collection and the corresponding indices are updated. */
    delete: operations["deleteDocument"];
    parameters: {
      path: {
        /** The ID of the collection */
        collection_name: string;
        /** The ID of the index */
        document_id: string;
      };
    };
  };
}

export interface components {}

export interface operations {
  /** Machine login using access and secret token. */
  machineLogin: {
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": {
            /** @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c */
            access_token: string;
            /** @enum {string} */
            type: "Bearer";
          };
        };
      };
      /** unauthorized */
      401: unknown;
      /** forbidden */
      403: unknown;
      /** internal server error */
      500: {
        content: {
          "application/json":
            | ({
                error: string;
              } & { [key: string]: unknown })
            | null;
        };
      };
    };
    /** Exchange access and secret token for JSON web token (JWT). */
    requestBody: {
      content: {
        "application/json": {
          access_key: string;
          secret_key: string;
        };
      };
    };
  };
  /** Get all machines in organization */
  getMachines: {
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": {
            machines: {
              machine_name: string;
              id: string;
              key: string;
              /** @enum {string} */
              permission: "write" | "read" | "admin";
            }[];
          };
        };
      };
      /** unauthorized */
      401: unknown;
      /** internal server error */
      500: {
        content: {
          "application/json":
            | ({
                error: string;
              } & { [key: string]: unknown })
            | null;
        };
      };
    };
  };
  /** Create a new machine account. */
  createMachine: {
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": {
            machine_name: string;
            id: string;
            key: string;
            secret: string;
            /** @enum {string} */
            permission: "write" | "read" | "admin";
          };
        };
      };
      /** unauthorized */
      401: unknown;
      /** internal server error */
      500: {
        content: {
          "application/json":
            | ({
                error: string;
              } & { [key: string]: unknown })
            | null;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          machine_name: string;
          /** @enum {string} */
          permission: "write" | "read" | "admin";
        };
      };
    };
  };
  /** Delete machine account */
  deleteMachine: {
    parameters: {
      path: {
        /** The ID of the machine */
        machine_id: string;
      };
    };
    responses: {
      /** successful operation */
      200: unknown;
      /** bad request */
      400: {
        content: {
          "application/json":
            | ({
                error: string;
              } & { [key: string]: unknown })
            | null;
        };
      };
      /** unauthorized */
      401: unknown;
      /** internal server error */
      500: {
        content: {
          "application/json":
            | ({
                error: string;
              } & { [key: string]: unknown })
            | null;
        };
      };
    };
  };
  /** Get information about databases */
  listDatabase: {
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": {
            databases: {
              id: string;
              database_name: string;
              /** @example xxxxxxxxxxxxxxxxxx */
              organization_id: string;
              /** Format: date-time */
              created_at: string;
              /** Format: date-time */
              deleted_at: string | null;
              instances: {
                id: string;
                /** Format: date-time */
                created_at: string;
                /** Format: date-time */
                deleted_at: string | null;
                /** @enum {string} */
                status: "awake" | "provisioning" | "wakingup" | "asleep";
                /**
                 * @description Instance type
                 * @default s
                 * @example s
                 * @enum {string}
                 */
                type: "xs" | "s" | "m" | "l" | "xl";
                server: {
                  id?: string;
                } | null;
                /**
                 * @description Size of mounted and volume in gb
                 * @default 10
                 * @example 100
                 */
                volume_size: number;
                /**
                 * @description Physical instance location
                 * @enum {string}
                 */
                location: "hel1" | "nbg1" | "fsn1";
              }[];
            }[];
          };
        };
      };
      /** bad request */
      400: {
        content: {
          "application/json":
            | ({
                error: string;
              } & { [key: string]: unknown })
            | null;
        };
      };
      /** unauthorized */
      401: unknown;
      /** internal server error */
      500: {
        content: {
          "application/json":
            | ({
                error: string;
              } & { [key: string]: unknown })
            | null;
        };
      };
    };
  };
  /** Create new database. */
  createDatabase: {
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": {
            id: string;
            database_name: string;
            /** @example xxxxxxxxxxxxxxxxxx */
            organization_id: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            deleted_at: string | null;
            instances: {
              id: string;
              /** Format: date-time */
              created_at: string;
              /** Format: date-time */
              deleted_at: string | null;
              /** @enum {string} */
              status: "awake" | "provisioning" | "wakingup" | "asleep";
              /**
               * @description Instance type
               * @default s
               * @example s
               * @enum {string}
               */
              type: "xs" | "s" | "m" | "l" | "xl";
              server: {
                id?: string;
              } | null;
              /**
               * @description Size of mounted and volume in gb
               * @default 10
               * @example 100
               */
              volume_size: number;
              /**
               * @description Physical instance location
               * @enum {string}
               */
              location: "hel1" | "nbg1" | "fsn1";
            }[];
          };
        };
      };
      /** successful operation */
      202: {
        content: {
          "application/json": {
            id: string;
            database_name: string;
            /** @example xxxxxxxxxxxxxxxxxx */
            organization_id: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            deleted_at: string | null;
            instances: {
              id: string;
              /** Format: date-time */
              created_at: string;
              /** Format: date-time */
              deleted_at: string | null;
              /** @enum {string} */
              status: "awake" | "provisioning" | "wakingup" | "asleep";
              /**
               * @description Instance type
               * @default s
               * @example s
               * @enum {string}
               */
              type: "xs" | "s" | "m" | "l" | "xl";
              server: {
                id?: string;
              } | null;
              /**
               * @description Size of mounted and volume in gb
               * @default 10
               * @example 100
               */
              volume_size: number;
              /**
               * @description Physical instance location
               * @enum {string}
               */
              location: "hel1" | "nbg1" | "fsn1";
            }[];
          };
        };
      };
      /** bad request */
      400: {
        content: {
          "application/json":
            | ({
                error: string;
              } & { [key: string]: unknown })
            | null;
        };
      };
      /** unauthorized */
      401: unknown;
      /** internal server error */
      500: {
        content: {
          "application/json":
            | ({
                error: string;
              } & { [key: string]: unknown })
            | null;
        };
      };
    };
    /** Newly created database. */
    requestBody: {
      content: {
        "application/json": {
          database_name: string;
          /** @description Currently only databases with up to a single instance are supported. */
          instances?: {
            /** @enum {string} */
            location?: "hel1" | "nbg1" | "fsn1";
            /** @enum {string} */
            type?: "xs" | "s" | "m" | "l" | "xl";
            /**
             * @description Size of mounted and volume in gb
             * @default 10
             * @example 100
             */
            volume_size?: number;
          }[];
        };
      };
    };
  };
  /** Get information about specific database */
  getDatabase: {
    parameters: {
      path: {
        /** The ID of the database */
        database_id: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": {
            id: string;
            database_name: string;
            /** @example xxxxxxxxxxxxxxxxxx */
            organization_id: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            deleted_at: string | null;
            instances: {
              id: string;
              /** Format: date-time */
              created_at: string;
              /** Format: date-time */
              deleted_at: string | null;
              /** @enum {string} */
              status: "awake" | "provisioning" | "wakingup" | "asleep";
              /**
               * @description Instance type
               * @default s
               * @example s
               * @enum {string}
               */
              type: "xs" | "s" | "m" | "l" | "xl";
              server: {
                id?: string;
              } | null;
              /**
               * @description Size of mounted and volume in gb
               * @default 10
               * @example 100
               */
              volume_size: number;
              /**
               * @description Physical instance location
               * @enum {string}
               */
              location: "hel1" | "nbg1" | "fsn1";
            }[];
          };
        };
      };
      /** bad request */
      400: {
        content: {
          "application/json":
            | ({
                error: string;
              } & { [key: string]: unknown })
            | null;
        };
      };
      /** unauthorized */
      401: unknown;
      /** not found */
      404: {
        content: {
          "application/json":
            | ({
                error: string;
              } & { [key: string]: unknown })
            | null;
        };
      };
      /** internal server error */
      500: {
        content: {
          "application/json":
            | ({
                error: string;
              } & { [key: string]: unknown })
            | null;
        };
      };
    };
  };
  /** Delete a specific database */
  deleteDatabase: {
    parameters: {
      path: {
        /** The ID of the database */
        database_id: string;
      };
    };
    responses: {
      /** successful operation */
      202: {
        content: {
          "application/json": {
            id: string;
            database_name: string;
            /** @example xxxxxxxxxxxxxxxxxx */
            organization_id: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            deleted_at: string | null;
            instances: {
              id: string;
              /** Format: date-time */
              created_at: string;
              /** Format: date-time */
              deleted_at: string | null;
              /** @enum {string} */
              status: "awake" | "provisioning" | "wakingup" | "asleep";
              /**
               * @description Instance type
               * @default s
               * @example s
               * @enum {string}
               */
              type: "xs" | "s" | "m" | "l" | "xl";
              server: {
                id?: string;
              } | null;
              /**
               * @description Size of mounted and volume in gb
               * @default 10
               * @example 100
               */
              volume_size: number;
              /**
               * @description Physical instance location
               * @enum {string}
               */
              location: "hel1" | "nbg1" | "fsn1";
            }[];
          };
        };
      };
      /** bad request */
      400: {
        content: {
          "application/json":
            | ({
                error: string;
              } & { [key: string]: unknown })
            | null;
        };
      };
      /** unauthorized */
      401: unknown;
      /** not found */
      404: {
        content: {
          "application/json":
            | ({
                error: string;
              } & { [key: string]: unknown })
            | null;
        };
      };
      /** internal server error */
      500: {
        content: {
          "application/json":
            | ({
                error: string;
              } & { [key: string]: unknown })
            | null;
        };
      };
    };
  };
  /** Get information about instances */
  listInstances: {
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": {
            instances: {
              id: string;
              /** Format: date-time */
              created_at: string;
              /** Format: date-time */
              deleted_at: string | null;
              /** @enum {string} */
              status: "awake" | "provisioning" | "wakingup" | "asleep";
              /**
               * @description Instance type
               * @default s
               * @example s
               * @enum {string}
               */
              type: "xs" | "s" | "m" | "l" | "xl";
              server: {
                id?: string;
              } | null;
              /**
               * @description Size of mounted and volume in gb
               * @default 10
               * @example 100
               */
              volume_size: number;
              /**
               * @description Physical instance location
               * @enum {string}
               */
              location: "hel1" | "nbg1" | "fsn1";
            }[];
          };
        };
      };
      /** bad request */
      400: {
        content: {
          "application/json":
            | ({
                error: string;
              } & { [key: string]: unknown })
            | null;
        };
      };
      /** unauthorized */
      401: unknown;
      /** internal server error */
      500: {
        content: {
          "application/json":
            | ({
                error: string;
              } & { [key: string]: unknown })
            | null;
        };
      };
    };
  };
  /** Create new instance. Currently you can only create a single instance per database. In future versions we will not restrict the number of instances per database. */
  createInstance: {
    responses: {
      /** successful operation */
      202: {
        content: {
          "application/json": {
            id: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            deleted_at: string | null;
            /** @enum {string} */
            status: "awake" | "provisioning" | "wakingup" | "asleep";
            /**
             * @description Instance type
             * @default s
             * @example s
             * @enum {string}
             */
            type: "xs" | "s" | "m" | "l" | "xl";
            server: {
              id?: string;
            } | null;
            /**
             * @description Size of mounted and volume in gb
             * @default 10
             * @example 100
             */
            volume_size: number;
            /**
             * @description Physical instance location
             * @enum {string}
             */
            location: "hel1" | "nbg1" | "fsn1";
          };
        };
      };
      /** bad request */
      400: {
        content: {
          "application/json":
            | ({
                error: string;
              } & { [key: string]: unknown })
            | null;
        };
      };
      /** unauthorized */
      401: unknown;
      /** forbidden */
      403: unknown;
      /** not found */
      404: {
        content: {
          "application/json":
            | ({
                error: string;
              } & { [key: string]: unknown })
            | null;
        };
      };
      /** internal server error */
      500: {
        content: {
          "application/json":
            | ({
                error: string;
              } & { [key: string]: unknown })
            | null;
        };
      };
    };
    /** Newly created Instance. */
    requestBody: {
      content: {
        "application/json": {
          /** @example xxxxxxxxxxxxxxxxxx */
          database_id: string;
          /**
           * @description Instance type
           * @default s
           * @example s
           * @enum {string}
           */
          type?: "xs" | "s" | "m" | "l" | "xl";
          /**
           * @description Size of mounted and volume in gb
           * @default 10
           * @example 100
           */
          volume_size?: number;
          /**
           * @description Physical instance location
           * @enum {string}
           */
          location?: "hel1" | "nbg1" | "fsn1";
        };
      };
    };
  };
  /** Get information about specific instance */
  getInstance: {
    parameters: {
      path: {
        /** The ID of the instance */
        instance_id: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": {
            id: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            deleted_at: string | null;
            /** @enum {string} */
            status: "awake" | "provisioning" | "wakingup" | "asleep";
            /**
             * @description Instance type
             * @default s
             * @example s
             * @enum {string}
             */
            type: "xs" | "s" | "m" | "l" | "xl";
            server: {
              id?: string;
            } | null;
            /**
             * @description Size of mounted and volume in gb
             * @default 10
             * @example 100
             */
            volume_size: number;
            /**
             * @description Physical instance location
             * @enum {string}
             */
            location: "hel1" | "nbg1" | "fsn1";
          };
        };
      };
      /** bad request */
      400: {
        content: {
          "application/json":
            | ({
                error: string;
              } & { [key: string]: unknown })
            | null;
        };
      };
      /** unauthorized */
      401: unknown;
      /** forbidden */
      403: unknown;
      /** not found */
      404: {
        content: {
          "application/json":
            | ({
                error: string;
              } & { [key: string]: unknown })
            | null;
        };
      };
      /** internal server error */
      500: {
        content: {
          "application/json":
            | ({
                error: string;
              } & { [key: string]: unknown })
            | null;
        };
      };
    };
  };
  /** Delete a specific Instance */
  deleteInstance: {
    parameters: {
      path: {
        /** The ID of the instance */
        instance_id: string;
      };
    };
    responses: {
      /** successful operation */
      202: {
        content: {
          "application/json": {
            id: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            deleted_at: string | null;
            /** @enum {string} */
            status: "awake" | "provisioning" | "wakingup" | "asleep";
            /**
             * @description Instance type
             * @default s
             * @example s
             * @enum {string}
             */
            type: "xs" | "s" | "m" | "l" | "xl";
            server: {
              id?: string;
            } | null;
            /**
             * @description Size of mounted and volume in gb
             * @default 10
             * @example 100
             */
            volume_size: number;
            /**
             * @description Physical instance location
             * @enum {string}
             */
            location: "hel1" | "nbg1" | "fsn1";
          };
        };
      };
      /** bad request */
      400: {
        content: {
          "application/json":
            | ({
                error: string;
              } & { [key: string]: unknown })
            | null;
        };
      };
      /** unauthorized */
      401: unknown;
      /** forbidden */
      403: unknown;
      /** not found */
      404: {
        content: {
          "application/json":
            | ({
                error: string;
              } & { [key: string]: unknown })
            | null;
        };
      };
      /** internal server error */
      500: {
        content: {
          "application/json":
            | ({
                error: string;
              } & { [key: string]: unknown })
            | null;
        };
      };
    };
  };
  /** Get information about collections */
  listCollections: {
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": {
            collections: {
              /** @example xxxxxxxxxxxxxxxxxx */
              collection_name: string;
            }[];
          };
        };
      };
      /** error */
      default: {
        content: {
          "application/json":
            | ({
                error: string;
              } & { [key: string]: unknown })
            | null;
        };
      };
    };
  };
  /** Create new collection */
  createCollection: {
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": {
            /** @example xxxxxxxxxxxxxxxxxx */
            collection_name: string;
          };
        };
      };
      /** error */
      default: {
        content: {
          "application/json":
            | ({
                error: string;
              } & { [key: string]: unknown })
            | null;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @example xxxxxxxxxxxxxxxxxx */
          collection_name: string;
        };
      };
    };
  };
  /** Get information about a specific collection */
  getCollection: {
    parameters: {
      path: {
        collection_name: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": {
            /** @example xxxxxxxxxxxxxxxxxx */
            collection_name: string;
          };
        };
      };
      /** error */
      default: {
        content: {
          "application/json":
            | ({
                error: string;
              } & { [key: string]: unknown })
            | null;
        };
      };
    };
  };
  /** Delete a specific collection */
  deleteCollection: {
    parameters: {
      path: {
        collection_name: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": {
            /** @example xxxxxxxxxxxxxxxxxx */
            collection_name: string;
          };
        };
      };
      /** error */
      default: {
        content: {
          "application/json":
            | ({
                error: string;
              } & { [key: string]: unknown })
            | null;
        };
      };
    };
  };
  /** Get information about an existing indices */
  listIndices: {
    parameters: {
      path: {
        /** The ID of the collection */
        collection_name: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": {
            indices: {
              /** @example xxxxxxxxxxxxxxxxxx */
              collection_name: string;
              /** @example xxxxxxxxxxxxxxxxxx */
              index_name: string;
              /** Format: int64 */
              n_documents: number;
              /** @enum {string} */
              distance_metric: "euclidean";
              /** Format: int64 */
              dimension: number;
            }[];
          };
        };
      };
      /** error */
      default: {
        content: {
          "application/json":
            | ({
                error: string;
              } & { [key: string]: unknown })
            | null;
        };
      };
    };
  };
  /** Create new index in the specified collection */
  createIndex: {
    parameters: {
      path: {
        /** The ID of the collection */
        collection_name: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": {
            /** @example xxxxxxxxxxxxxxxxxx */
            collection_name: string;
            /** @example xxxxxxxxxxxxxxxxxx */
            index_name: string;
            /** Format: int64 */
            n_documents: number;
            /** @enum {string} */
            distance_metric: "euclidean";
            /** Format: int64 */
            dimension: number;
          };
        };
      };
      /** error */
      default: {
        content: {
          "application/json":
            | ({
                error: string;
              } & { [key: string]: unknown })
            | null;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @example xxxxxxxxxxxxxxxxxx */
          index_name: string;
          /** Format: int64 */
          dimension: number;
        };
      };
    };
  };
  /** Get information about specific index */
  getIndex: {
    parameters: {
      path: {
        /** The ID of the collection */
        collection_name: string;
        /** The ID of the index */
        index_name: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": {
            /** @example xxxxxxxxxxxxxxxxxx */
            collection_name: string;
            /** @example xxxxxxxxxxxxxxxxxx */
            index_name: string;
            /** Format: int64 */
            n_documents: number;
            /** @enum {string} */
            distance_metric: "euclidean";
            /** Format: int64 */
            dimension: number;
          };
        };
      };
      /** error */
      default: {
        content: {
          "application/json":
            | ({
                error: string;
              } & { [key: string]: unknown })
            | null;
        };
      };
    };
  };
  /** Delete index */
  deleteIndex: {
    parameters: {
      path: {
        /** The ID of the collection */
        collection_name: string;
        /** The ID of the index */
        index_name: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": {
            /** @example xxxxxxxxxxxxxxxxxx */
            collection_name: string;
            /** @example xxxxxxxxxxxxxxxxxx */
            index_name: string;
            /** Format: int64 */
            n_documents: number;
            /** @enum {string} */
            distance_metric: "euclidean";
            /** Format: int64 */
            dimension: number;
          };
        };
      };
      /** error */
      default: {
        content: {
          "application/json":
            | ({
                error: string;
              } & { [key: string]: unknown })
            | null;
        };
      };
    };
  };
  /** Insert document. The field "index_name" can be indexed by an index with the same name */
  insertDocuments: {
    parameters: {
      path: {
        /** The ID of the collection */
        collection_name: string;
      };
    };
    responses: {
      /** Insertion successful */
      200: unknown;
      /** error */
      default: {
        content: {
          "application/json":
            | ({
                error: string;
              } & { [key: string]: unknown })
            | null;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          documents: ({
            id: string;
            /** @example 1,2,3 */
            field?: number[];
          } & { [key: string]: unknown })[];
        };
        "application/octet-stream": string;
      };
    };
  };
  /** Search for nearest vectors to specified vector. Instead of specifying `vector: <array>` you can search for similar documents directly by setting `id: <document_id>` instead */
  getAnn: {
    parameters: {
      path: {
        /** The ID of the collection */
        collection_name: string;
      };
    };
    responses: {
      /** Insertion successful */
      200: {
        content: {
          "application/json": {
            data: string[][];
          }[];
        };
      };
      /** error */
      default: {
        content: {
          "application/json":
            | ({
                error: string;
              } & { [key: string]: unknown })
            | null;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description Get documents close to the specified document. Provide either `ids` or `vectors`
           * @example document1,document2,document3
           */
          ids?: string[];
          /**
           * @description Get documents close to the vector. The length of the vector must be equal to the dimension specified in the index
           * @example 1,2,3
           */
          vectors?: number[][];
          /**
           * @description Maximal number of neighbors to include in response
           * @default 20
           */
          max_neighbors: number;
          /**
           * @description This parameter specifies the index to perform the query in
           * @example xxxxxxxxxxxxxxxxxx
           */
          index_name: string;
        };
        "application/octet-stream": string;
      };
    };
  };
  /** Get document by ID */
  getDocument: {
    parameters: {
      path: {
        /** The ID of the collection */
        collection_name: string;
        /** The ID of the index */
        document_id: string;
      };
    };
    responses: {
      /** Insertion successful */
      200: {
        content: {
          "application/json": {
            id: string;
            /** @example 1,2,3 */
            field?: number[];
          } & { [key: string]: unknown };
        };
      };
      /** error */
      default: {
        content: {
          "application/json":
            | ({
                error: string;
              } & { [key: string]: unknown })
            | null;
        };
      };
    };
  };
  /** Remove document by ID. The document is deleted from the collection and the corresponding indices are updated. */
  deleteDocument: {
    parameters: {
      path: {
        /** The ID of the collection */
        collection_name: string;
        /** The ID of the index */
        document_id: string;
      };
    };
    responses: {
      /** Insertion successful */
      200: {
        content: {
          "application/json": {
            id: string;
            /** @example 1,2,3 */
            field?: number[];
          } & { [key: string]: unknown };
        };
      };
      /** error */
      default: {
        content: {
          "application/json":
            | ({
                error: string;
              } & { [key: string]: unknown })
            | null;
        };
      };
    };
  };
}

export interface external {}
