{"mappings":"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","sources":["src/src/index.ts","src/index.ts"],"sourcesContent":[null,"import axios, { AxiosInstance } from \"axios\";\r\nimport jwtDecode from 'jwt-decode';\r\nimport { paths } from \"./hiddb\";\r\n\r\nexport abstract class State {\r\n  abstract get accessToken(): string | undefined;\r\n  abstract get machineKey(): string | undefined;\r\n  abstract get machineSecret(): string | undefined;\r\n\r\n  abstract set accessToken(accessToken);\r\n  protected abstract refreshToken(): Promise<void>;\r\n}\r\n\r\nexport type JWT = {\r\n  sub: string,\r\n  amr: [string],  // possible values: password, refresh_token, otp\r\n  scope: string,\r\n  email: string,\r\n  email_verified: boolean,\r\n  role: string,\r\n  plan: string,\r\n  organization: string,\r\n  iat: number,\r\n  exp: number,\r\n};\r\n\r\ntype Events =\r\n  ({ type: 'login' } & CustomEvent<JWT>) |\r\n  ({ type: 'logout' } & Event) |\r\n  ({ type: 'databaseCreated' } & Event) |\r\n  ({ type: 'databaseDeleted' } & Event) |\r\n  ({ type: 'instanceCreated' } & Event) |\r\n  ({ type: 'instanceDeleted' } & Event) |\r\n  ({ type: 'collectionCreated' } & Event) |\r\n  ({ type: 'collectionDeleted' } & Event) |\r\n  ({ type: 'indexCreated' } & Event) |\r\n  ({ type: 'indexDeleted' } & Event);\r\n\r\nclass MachineState extends State {\r\n  private hiddb: HIDDB;\r\n  private _accessToken?: string = '';\r\n  private _decoded?: JWT;\r\n  private _refresh?: number;\r\n\r\n  private _key: string;\r\n  private _secret: string;\r\n\r\n  constructor(hiddb: HIDDB, key: string, secret: string) {\r\n    super();\r\n    this.hiddb = hiddb;\r\n    this._key = key;\r\n    this._secret = secret;\r\n  }\r\n\r\n  get accessToken() {\r\n    return this._accessToken;\r\n  }\r\n\r\n  get machineKey() {\r\n    return this._key;\r\n  }\r\n\r\n  get machineSecret() {\r\n    return this._secret;\r\n  }\r\n\r\n  set accessToken(accessToken) {\r\n    if (accessToken === undefined) {\r\n      this._accessToken = accessToken;\r\n      return;\r\n    }\r\n\r\n    this._decoded = jwtDecode(accessToken) as JWT;\r\n    if (!this._accessToken && accessToken) {\r\n      if (typeof CustomEvent !== 'undefined') {\r\n        // @ts-expect-error\r\n        this.hiddb.dispatchEvent(new CustomEvent('login', {\r\n          detail: JSON.parse(JSON.stringify(this._decoded))\r\n        }));\r\n      }\r\n    }\r\n    this._accessToken = accessToken;\r\n\r\n    if (typeof window !== 'undefined') {\r\n      // try to refresh one minute before expiry\r\n      if (this._refresh) window.clearTimeout(this._refresh);\r\n      this._refresh = window.setTimeout(() => this.refreshToken(), this._decoded.exp * 1000 - Date.now() - 60000);\r\n    } else {\r\n      if (this._refresh) clearTimeout(this._refresh);\r\n      this._refresh = setTimeout(() => this.refreshToken(), this._decoded.exp * 1000 - Date.now() - 60000);\r\n    }\r\n  }\r\n\r\n  protected async refreshToken() {\r\n    await this.hiddb.machineLogin(this.machineKey, this.machineSecret);\r\n  }\r\n}\r\n\r\nexport class HIDDB extends EventTarget {\r\n  protected state: State;\r\n  protected axios: AxiosInstance;\r\n  protected client: AxiosInstance;\r\n  protected dbDomain: string;\r\n\r\n  constructor(params: { key: string, secret: string, apiDomain?: string, dbDomain?: string, secure?: boolean }) {\r\n    super();\r\n    this.state = new MachineState(this, params.key, params.secret);\r\n\r\n    this.axios = axios.create();\r\n    this.axios.defaults.headers.post['Content-Type'] = 'application/json';\r\n    this.axios.interceptors.request.use(\r\n      (config) => {\r\n        return {\r\n          ...config,\r\n          headers: this.state.accessToken ? {\r\n            ...(config.headers ?? {}),\r\n            Authorization: `Bearer ${this.state.accessToken}`,\r\n          } : config.headers,\r\n        };\r\n      },\r\n      (error) => {\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n\r\n    this.dbDomain = params.dbDomain ?? 'hiddb.io';\r\n\r\n    this.client = axios.create({\r\n      baseURL: `${params.secure ? 'https' : 'http'}://api.${params.apiDomain ?? 'hiddb.io'}`,\r\n      timeout: 30000\r\n    });\r\n    this.client.defaults.headers.post['Content-Type'] = 'application/json';\r\n    this.client.interceptors.request.use(\r\n      (config) => {\r\n        return {\r\n          ...config,\r\n          headers: this.state.accessToken ? {\r\n            ...(config.headers ?? {}),\r\n            Authorization: `Bearer ${this.state.accessToken}`,\r\n          } : config.headers,\r\n        };\r\n      },\r\n      (error) => {\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  public dispatchEvent<\r\n    T extends Events['type'],\r\n    E extends Events & { type: T }\r\n  >(event: E): boolean {\r\n    return super.dispatchEvent(event);\r\n  }\r\n\r\n  public addEventListener<\r\n    T extends Events['type'],\r\n    E extends Events & { type: T }\r\n  >(type: T, callback: ((e: E) => void) | { handleEvent: (e: E) => void } | null): void {\r\n    return super.addEventListener(type, callback as EventListenerOrEventListenerObject);\r\n  }\r\n\r\n  public removeEventListener(type: Events['type']) {\r\n    super.removeEventListener(type, null)\r\n  }\r\n\r\n  isAuthenticated() {\r\n    return Boolean(this.state.accessToken);\r\n  }\r\n\r\n  async machineLogin(key: string, secret: string) {\r\n    const path = \"/machine/login\" as const;\r\n    const method = \"post\" as const;\r\n\r\n    const body: paths[typeof path][typeof method][\"requestBody\"][\"content\"][\"application/json\"] =\r\n    {\r\n      access_key: key,\r\n      secret_key: secret,\r\n    };\r\n\r\n    const response = await this.client[method]<\r\n      paths[typeof path][typeof method][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\n    >(path, body);\r\n\r\n    // update accessToken\r\n    this.state.accessToken = response.data.access_token;\r\n  }\r\n\r\n  async createMachineAccount(machineName: string, permission: \"read\" | \"write\" | \"admin\") {\r\n    const path = \"/machine\" as const;\r\n    const method = \"post\" as const;\r\n\r\n    const body: paths[typeof path][typeof method][\"requestBody\"][\"content\"][\"application/json\"] =\r\n    {\r\n      machine_name: machineName,\r\n      permission\r\n    };\r\n\r\n    const response = await this.client[method]<\r\n      paths[typeof path][typeof method][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\n    >(`/machine`, body);\r\n\r\n    return response.data\r\n  }\r\n\r\n  async getMachineAccounts() {\r\n    const path = \"/machine\" as const;\r\n    const method = \"get\" as const;\r\n\r\n    const response = await this.client[method]<\r\n      paths[typeof path][typeof method][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\n    >(`/machine`);\r\n\r\n    return response.data\r\n  }\r\n\r\n  async deleteMachineAccount(machineId: string) {\r\n    const path = \"/machine/{machine_id}\" as const;\r\n    const method = \"delete\" as const;\r\n\r\n    const response = await this.client[method]<\r\n      paths[typeof path][typeof method][\"responses\"][\"200\"]\r\n    >(`/machine/${machineId}`);\r\n\r\n    return response.data\r\n  }\r\n\r\n  async createDatabase(name: string, instances: [{ type: \"xs\" | \"s\" | \"m\" | \"l\" | \"xl\", volume_size: number }]) {\r\n    const path = \"/database\" as const;\r\n    const method = \"post\" as const;\r\n    const body: paths[typeof path][typeof method][\"requestBody\"][\"content\"][\"application/json\"] = {\r\n      database_name: name,\r\n      instances\r\n    };\r\n\r\n    const response = await this.client[method]<\r\n      paths[typeof path][typeof method][\"responses\"][\"202\"][\"content\"][\"application/json\"]\r\n    >(path, body);\r\n\r\n    // @ts-expect-error\r\n    this.dispatchEvent(new Event('databaseCreated'));\r\n\r\n    return response.data;\r\n  }\r\n\r\n  async listDatabases() {\r\n    const path = \"/database\" as const;\r\n    const method = \"get\" as const;\r\n\r\n    const response = await this.client[method]<\r\n      paths[typeof path][typeof method][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\n    >(path);\r\n\r\n    return response.data;\r\n  }\r\n\r\n  async getDatabase(id: string) {\r\n    const path = `/database/${id}` as const;\r\n    const method = \"get\" as const;\r\n\r\n    const response = await this.client[method]<\r\n      paths['/database/{database_id}'][typeof method][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\n    >(path);\r\n\r\n    return response.data;\r\n  }\r\n\r\n  async deleteDatabase(id: string) {\r\n    const path = `/database/${id}` as const;\r\n    const method = \"delete\" as const;\r\n\r\n    const response = await this.client[method]<\r\n      paths['/database/{database_id}'][typeof method][\"responses\"][\"202\"][\"content\"][\"application/json\"]\r\n    >(path);\r\n\r\n    // @ts-expect-error\r\n    this.dispatchEvent(new Event('databaseDeleted'));\r\n\r\n    return response.data;\r\n  }\r\n\r\n  async createInstance(id: string, volume_size: number, type: \"xs\" | \"s\" | \"m\" | \"l\" | \"xl\") {\r\n    const path = \"/instance\" as const;\r\n    const method = \"post\" as const;\r\n    const body: paths[typeof path][typeof method][\"requestBody\"][\"content\"][\"application/json\"] = {\r\n      database_id: id,\r\n      volume_size,\r\n      type\r\n    };\r\n\r\n    const response = await this.client[method]<\r\n      paths[typeof path][typeof method][\"responses\"][\"202\"][\"content\"][\"application/json\"]\r\n    >(path, body);\r\n\r\n    // @ts-expect-error\r\n    this.dispatchEvent(new Event('instanceCreated'));\r\n\r\n    return response.data;\r\n  }\r\n\r\n  async listInstances() {\r\n    const path = \"/instance\" as const;\r\n    const method = \"get\" as const;\r\n\r\n    const response = await this.client[method]<\r\n      paths[typeof path][typeof method][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\n    >(path);\r\n\r\n    return response.data;\r\n  }\r\n\r\n  async getInstance(id: string) {\r\n    const path = `/instance/${id}` as const;\r\n    const method = \"get\" as const;\r\n\r\n    const response = await this.client[method]<\r\n      paths['/instance/{instance_id}'][typeof method][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\n    >(path);\r\n\r\n    return response.data;\r\n  }\r\n\r\n  async deleteInstance(id: string) {\r\n    const path = `/database/${id}` as const;\r\n    const method = \"delete\" as const;\r\n\r\n    const response = await this.client[method]<\r\n      paths['/instance/{instance_id}'][typeof method][\"responses\"][\"202\"][\"content\"][\"application/json\"]\r\n    >(path);\r\n\r\n    // @ts-expect-error\r\n    this.dispatchEvent(new Event('instanceDeleted'));\r\n\r\n    return response.data;\r\n  }\r\n\r\n\r\n  async createCollection(databaseId: string, name: string) {\r\n    const path = \"/collection\" as const;\r\n    const method = \"post\" as const;\r\n    const body: paths[typeof path][typeof method][\"requestBody\"][\"content\"][\"application/json\"] = {\r\n      collection_name: name\r\n    };\r\n\r\n    const response = await this.axios[method]<\r\n      paths[typeof path][typeof method][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\n    >(`https://${databaseId}.${this.dbDomain}${path}`, body);\r\n\r\n    // @ts-expect-error\r\n    this.dispatchEvent(new Event('collectionCreated'));\r\n\r\n    return response.data;\r\n  }\r\n\r\n  async listCollections(databaseId: string) {\r\n    const path = \"/collection\" as const;\r\n    const method = \"get\" as const;\r\n\r\n    const response = await this.axios[method]<\r\n      paths[typeof path][typeof method][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\n    >(`https://${databaseId}.${this.dbDomain}${path}`);\r\n\r\n    return response.data;\r\n  }\r\n\r\n\r\n  async getCollection(databaseId: string, name: string) {\r\n    const path = `/collection/${name}` as const;\r\n    const method = \"get\" as const;\r\n\r\n    const response = await this.axios[method]<\r\n      paths['/collection/{collection_name}'][typeof method][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\n    >(`https://${databaseId}.${this.dbDomain}${path}`);\r\n\r\n    return response.data;\r\n  }\r\n\r\n  async deleteCollection(databaseId: string, name: string) {\r\n    const path = `/collection/${name}` as const;\r\n    const method = \"delete\" as const;\r\n\r\n    const response = await this.axios[method]<\r\n      paths['/collection/{collection_name}'][typeof method][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\n    >(`https://${databaseId}.${this.dbDomain}${path}`);\r\n\r\n    // @ts-expect-error\r\n    this.dispatchEvent(new Event('collectionDeleted'));\r\n\r\n    return response.data;\r\n  }\r\n\r\n  async createIndex(databaseId: string, collection_name: string, field_name: string, dimension: number) {\r\n    const rawPath = \"/collection/{collection_name}/index\" as const;\r\n    const path = `/collection/${collection_name}/index` as const;\r\n    const method = \"post\" as const;\r\n    const body: paths[typeof rawPath][typeof method][\"requestBody\"][\"content\"][\"application/json\"] = {\r\n      field_name: field_name,\r\n      dimension\r\n    };\r\n\r\n    const response = await this.axios[method]<\r\n      paths[typeof rawPath][typeof method][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\n    >(`https://${databaseId}.${this.dbDomain}${path}`, body);\r\n\r\n    // @ts-expect-error\r\n    this.dispatchEvent(new Event('indexCreated'));\r\n\r\n    return response.data;\r\n  }\r\n\r\n  async listIndices(databaseId: string, collection_name: string) {\r\n    const rawPath = \"/collection/{collection_name}/index\" as const;\r\n    const path = `/collection/${collection_name}/index` as const;\r\n    const method = \"get\" as const;\r\n\r\n    const response = await this.axios[method]<\r\n      paths[typeof rawPath][typeof method][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\n    >(`https://${databaseId}.${this.dbDomain}${path}`);\r\n\r\n    return response.data;\r\n  }\r\n\r\n\r\n  async getIndex(databaseId: string, collection_name: string, index_name: string) {\r\n    const rawPath = \"/collection/{collection_name}/index/{field_name}\" as const;\r\n    const path = `/collection/${collection_name}/index/${index_name}` as const;\r\n    const method = \"get\" as const;\r\n\r\n    const response = await this.axios[method]<\r\n      paths[typeof rawPath][typeof method][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\n    >(`https://${databaseId}.${this.dbDomain}${path}`);\r\n\r\n    return response.data;\r\n  }\r\n\r\n  async deleteIndex(databaseId: string, collection_name: string, index_name: string) {\r\n    const rawPath = \"/collection/{collection_name}/index/{field_name}\" as const;\r\n    const path = `/collection/${collection_name}/index/${index_name}` as const;\r\n    const method = \"delete\" as const;\r\n\r\n    const response = await this.axios[method]<\r\n      paths[typeof rawPath][typeof method][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\n    >(`https://${databaseId}.${this.dbDomain}${path}`);\r\n\r\n    // @ts-expect-error\r\n    this.dispatchEvent(new Event('indexDeleted'));\r\n\r\n    return response.data;\r\n  }\r\n\r\n\r\n  async insertDocument(databaseId: string, collection_name: string, document: { id: string, [key: string]: string }) {\r\n    const rawPath = \"/collection/{collection_name}/document\" as const;\r\n    const path = `/collection/${collection_name}/document` as const;\r\n    const method = \"post\" as const;\r\n    const body: paths[typeof rawPath][typeof method][\"requestBody\"][\"content\"][\"application/json\"] = {\r\n      documents: [document]\r\n    };\r\n\r\n    const response = await this.axios[method]<\r\n      paths[typeof rawPath][typeof method][\"responses\"][\"200\"]\r\n    >(`https://${databaseId}.${this.dbDomain}${path}`, body);\r\n\r\n    return response.data;\r\n  }\r\n\r\n  async searchNearestDocuments(databaseId: string, collection_name: string, vector: [number], field_name: string, max_neighbors: number) {\r\n    const rawPath = \"/collection/{collection_name}/document/search\" as const;\r\n    const path = `/collection/${collection_name}/document/search` as const;\r\n    const method = \"post\" as const;\r\n    const body: paths[typeof rawPath][typeof method][\"requestBody\"][\"content\"][\"application/json\"] = {\r\n      vectors: [vector],\r\n      field_name: field_name,\r\n      max_neighbors: max_neighbors\r\n    };\r\n\r\n    const response = await this.axios[method]<\r\n      paths[typeof rawPath][typeof method][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\n    >(`https://${databaseId}.${this.dbDomain}${path}`, body);\r\n\r\n    return response.data;\r\n  }\r\n\r\n  async getDocument(databaseId: string, collection_name: string, id: string) {\r\n    const rawPath = \"/collection/{collection_name}/document/{document_id}\" as const;\r\n    const path = `/collection/${collection_name}/document/${id}` as const;\r\n    const method = \"get\" as const;\r\n\r\n    const response = await this.axios[method]<\r\n      paths[typeof rawPath][typeof method][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\n    >(`https://${databaseId}.${this.dbDomain}${path}`);\r\n\r\n    return response.data;\r\n  }\r\n\r\n  async deleteDocument(databaseId: string, collection_name: string, id: string) {\r\n    const rawPath = \"/collection/{collection_name}/document/{document_id}\" as const;\r\n    const path = `/collection/${collection_name}/document/${id}` as const;\r\n    const method = \"delete\" as const;\r\n\r\n    const response = await this.axios[method]<\r\n      paths[typeof rawPath][typeof method][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\n    >(`https://${databaseId}.${this.dbDomain}${path}`);\r\n\r\n    return response.data;\r\n  }\r\n}\r\n"],"names":[],"version":3,"file":"types.d.ts.map"}