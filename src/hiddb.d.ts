/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/user/register": {
    /** Register user. Email containing URL with OTP is send out to user. */
    post: {
      responses: {
        /** successful operation */
        200: unknown;
        /** invalid parameters */
        400: unknown;
        /** invalid input */
        401: unknown;
        /** unauthorized */
        403: unknown;
        /** forbidden */
        405: unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UserRegister"];
        };
      };
    };
  };
  "/user/update/verify": {
    /** Verify email adress provided by the user. */
    post: {
      responses: {
        /** successful operation */
        200: unknown;
        /** invalid parameters */
        400: unknown;
        /** invalid input */
        401: unknown;
        /** unauthorized */
        403: unknown;
        /** forbidden */
        405: unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UserVerify"];
        };
      };
    };
  };
  "/user/reset": {
    /** Send URL containing OTP to email adress provided by user to reset password. */
    post: {
      responses: {
        /** successful operation */
        200: unknown;
        /** invalid parameters */
        400: unknown;
        /** invalid input */
        401: unknown;
        /** unauthorized */
        403: unknown;
        /** forbidden */
        405: unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UserReset"];
        };
      };
    };
  };
  "/user/update/reset": {
    /** Reset password as requested by the user. */
    post: {
      responses: {
        /** successful operation */
        200: unknown;
        /** invalid parameters */
        400: unknown;
        /** invalid input */
        401: unknown;
        /** unauthorized */
        403: unknown;
        /** forbidden */
        405: unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UserUpdateReset"];
        };
      };
    };
  };
  "/user/login": {
    /** User login using access and secret token. */
    post: operations["userLogin"];
  };
  "/user/refresh": {
    /** Refresh access token using cookie */
    post: {
      responses: {
        /** successful operation */
        200: {
          content: {
            "application/json": string;
          };
        };
        /** invalid parameters */
        400: unknown;
        /** invalid input */
        401: unknown;
        /** unauthorized */
        403: unknown;
        /** forbidden */
        405: unknown;
      };
      /** Exchange access and secret token for JSON web token (JWT). */
      requestBody: {
        content: {
          "application/json": components["schemas"]["UserRefresh"];
        };
      };
    };
  };
  "/machine/login": {
    /** Machine login using access and secret token. */
    post: operations["machineLogin"];
  };
  "/organization/{organization_id}/machine": {
    /** Create access and secret key for a new machine */
    post: operations["createMachine"];
    /** Delete machine account */
    delete: operations["deleteMachine"];
    parameters: {
      path: {
        /** Your organization ID. You can find your organization ID in your dashboard */
        organization_id: components["parameters"]["OrganizationId"];
      };
    };
  };
  "/health": {
    /** Check access to databases */
    get: {
      responses: {
        /** successfull operation */
        200: {
          content: {
            "text/plain": "Ok";
          };
        };
      };
    };
  };
  "/organization": {
    /** Get information about organizations */
    get: {
      responses: {
        /** successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["OrganizationsResponse"];
          };
        };
      };
    };
    /** Create new organization */
    post: {
      responses: {
        /** successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["OrganizationResponse"];
          };
        };
      };
      /** Newly created organization. */
      requestBody: {
        content: {
          "application/json": components["schemas"]["OrganizationRequest"];
        };
      };
    };
  };
  "/organization/{organization_id}": {
    /** Get information about specific organization */
    get: {
      parameters: {
        path: {
          /** Your organization ID. You can find your organization ID in your dashboard */
          organization_id: components["parameters"]["OrganizationId"];
        };
      };
      responses: {
        /** successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["OrganizationResponse"];
          };
        };
      };
    };
    /** Delete a specific organization */
    delete: {
      parameters: {
        path: {
          /** Your organization ID. You can find your organization ID in your dashboard */
          organization_id: components["parameters"]["OrganizationId"];
        };
      };
      responses: {
        /** successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["OrganizationResponse"];
          };
        };
      };
    };
    parameters: {
      path: {
        /** Your organization ID. You can find your organization ID in your dashboard */
        organization_id: components["parameters"]["OrganizationId"];
      };
    };
  };
  "/user": {
    /** Get information about user in organization */
    get: {
      responses: {
        /** successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["UsersResponse"];
          };
        };
      };
    };
  };
  "/user/{user_id}": {
    /** Get information about specific user */
    get: {
      parameters: {
        path: {
          /** Your user ID. You can find your user ID in your dashboard */
          user_id: components["parameters"]["UserId"];
        };
      };
      responses: {
        /** successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["UserResponse"];
          };
        };
      };
    };
    /** Delete a specific user */
    delete: {
      parameters: {
        path: {
          /** Your user ID. You can find your user ID in your dashboard */
          user_id: components["parameters"]["UserId"];
        };
      };
      responses: {
        /** successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["UserResponse"];
          };
        };
      };
    };
    parameters: {
      path: {
        /** Your user ID. You can find your user ID in your dashboard */
        user_id: components["parameters"]["UserId"];
      };
    };
  };
  "/database": {
    /** Get information about databases */
    get: {
      responses: {
        /** successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["DatabasesResponse"];
          };
        };
      };
    };
    /** Create new database */
    post: {
      responses: {
        /** successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["DatabaseResponse"];
          };
        };
      };
      /** Newly created database. */
      requestBody: {
        content: {
          "application/json": components["schemas"]["DatabaseRequest"];
        };
      };
    };
  };
  "/database/{database_id}": {
    /** Get information about specific database */
    get: {
      parameters: {
        path: {
          /** The ID of the database */
          database_id: components["parameters"]["DatabaseId"];
        };
      };
      responses: {
        /** successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["DatabaseResponse"];
          };
        };
      };
    };
    /** Delete a specific database */
    delete: {
      parameters: {
        path: {
          /** The ID of the database */
          database_id: components["parameters"]["DatabaseId"];
        };
      };
      responses: {
        /** successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["DatabaseResponse"];
          };
        };
      };
    };
    parameters: {
      path: {
        /** The ID of the database */
        database_id: components["parameters"]["DatabaseId"];
      };
    };
  };
  "/instance": {
    /** Get information about instances */
    get: {
      responses: {
        /** successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["InstancesResponse"];
          };
        };
      };
    };
    /** Create new instance */
    post: {
      responses: {
        /** successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["InstanceResponse"];
          };
        };
      };
      /** Newly created Instance. */
      requestBody: {
        content: {
          "application/json": components["schemas"]["InstanceRequest"];
        };
      };
    };
  };
  "/instance/{instance_id}": {
    /** Get information about specific instance */
    get: {
      parameters: {
        path: {
          /** The ID of the instance */
          instance_id: components["parameters"]["InstanceId"];
        };
      };
      responses: {
        /** successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["InstanceResponse"];
          };
        };
      };
    };
    /** Awake or put instance to sleep */
    put: {
      parameters: {
        path: {
          /** The ID of the instance */
          instance_id: components["parameters"]["InstanceId"];
        };
      };
      responses: {
        /** successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["InstanceResponse"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["SleepAwakeInstance"];
        };
      };
    };
    /** Delete a specific Instance */
    delete: {
      parameters: {
        path: {
          /** The ID of the instance */
          instance_id: components["parameters"]["InstanceId"];
        };
      };
      responses: {
        /** successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["InstanceResponse"];
          };
        };
      };
    };
    parameters: {
      path: {
        /** The ID of the instance */
        instance_id: components["parameters"]["InstanceId"];
      };
    };
  };
  "/collection": {
    /** Get information about collections */
    get: {
      responses: {
        /** successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["CollectionsResponse"];
          };
        };
      };
    };
    /** Create new collection */
    post: {
      responses: {
        /** successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["CollectionResponse"];
          };
        };
        /** invalid parameters */
        400: unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["CollectionRequest"];
        };
      };
    };
  };
  "/collection/{collection_id}": {
    /** Get information about a specific collection */
    get: {
      parameters: {
        path: {
          collection_id: string;
        };
      };
      responses: {
        /** successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["CollectionResponse"];
          };
        };
      };
    };
    /** Delete a specific collection */
    delete: {
      parameters: {
        path: {
          collection_id: string;
        };
      };
      responses: {
        /** successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["CollectionResponse"];
          };
        };
      };
    };
  };
  "/collection/{collection_id}/index": {
    /** Get information about an existing indices */
    get: {
      parameters: {
        path: {
          /** The ID of the collection */
          collection_id: components["parameters"]["CollectionId"];
        };
      };
      responses: {
        /** successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["IndicesResponse"];
          };
        };
      };
    };
    /** Create new index in the specified collection */
    post: {
      parameters: {
        path: {
          /** The ID of the collection */
          collection_id: components["parameters"]["CollectionId"];
        };
      };
      responses: {
        /** successful operation */
        200: unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["IndexRequest"];
        };
      };
    };
    parameters: {
      path: {
        /** The ID of the collection */
        collection_id: components["parameters"]["CollectionId"];
      };
    };
  };
  "/collection/{collection_id}/index/{index_id}": {
    /** Get information about specific index */
    get: {
      parameters: {
        path: {
          /** The ID of the collection */
          collection_id: components["parameters"]["CollectionId"];
          /** The ID of the index */
          index_id: components["parameters"]["IndexId"];
        };
      };
      responses: {
        /** successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["IndexResponse"];
          };
        };
        /** invalid parameters */
        400: unknown;
      };
    };
    /** Delete index */
    delete: {
      parameters: {
        path: {
          /** The ID of the collection */
          collection_id: components["parameters"]["CollectionId"];
          /** The ID of the index */
          index_id: components["parameters"]["IndexId"];
        };
      };
      responses: {
        /** successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["IndexResponse"];
          };
        };
        /** invalid parameters */
        400: unknown;
      };
    };
    parameters: {
      path: {
        /** The ID of the collection */
        collection_id: components["parameters"]["CollectionId"];
        /** The ID of the index */
        index_id: components["parameters"]["IndexId"];
      };
    };
  };
  "/collection/{collection_id}/document": {
    /** Insert document. The field "field_id" will be indexed by all existing indices */
    post: {
      parameters: {
        path: {
          /** The ID of the collection */
          collection_id: components["parameters"]["CollectionId"];
        };
      };
      responses: {
        /** Insertion successful */
        200: unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["DocumentRequest"];
        };
      };
    };
    parameters: {
      path: {
        /** The ID of the collection */
        collection_id: components["parameters"]["CollectionId"];
      };
    };
  };
  "/collection/{collection_id}/document/search": {
    /** Search for nearest vectors to specified vector. Instead of specifying `vector: <array>` you can search for similar documents directly by setting `id: <document_id>` instead */
    post: {
      parameters: {
        path: {
          /** The ID of the collection */
          collection_id: components["parameters"]["CollectionId"];
        };
      };
      responses: {
        /** Insertion successful */
        200: {
          content: {
            "application/json": components["schemas"]["SearchResponse"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["SearchRequest"];
        };
      };
    };
    parameters: {
      path: {
        /** The ID of the collection */
        collection_id: components["parameters"]["CollectionId"];
      };
    };
  };
  "/collection/{collection_id}/document/{document_id}": {
    /** Get document by ID */
    get: {
      parameters: {
        path: {
          /** The ID of the collection */
          collection_id: components["parameters"]["CollectionId"];
          /** The ID of the index */
          document_id: components["parameters"]["DocumentId"];
        };
      };
      responses: {
        /** Insertion successful */
        200: {
          content: {
            "application/json": components["schemas"]["DocumentResponse"];
          };
        };
      };
    };
    /** This feature is not available yet but coming soon! Remove document by ID. The corresponding indices will be updated */
    delete: {
      parameters: {
        path: {
          /** The ID of the collection */
          collection_id: components["parameters"]["CollectionId"];
          /** The ID of the index */
          document_id: components["parameters"]["DocumentId"];
        };
      };
      responses: {
        /** Insertion successful */
        200: {
          content: {
            "application/json": components["schemas"]["DocumentResponse"];
          };
        };
      };
    };
    parameters: {
      path: {
        /** The ID of the collection */
        collection_id: components["parameters"]["CollectionId"];
        /** The ID of the index */
        document_id: components["parameters"]["DocumentId"];
      };
    };
  };
}

export interface components {
  schemas: {
    MachineLogin: {
      access_key?: string;
      secret_key?: string;
    };
    UserLogin: {
      /** Format: email */
      email?: string;
      /** Format: password */
      password?: string;
    };
    UserRegister: {
      /** Format: email */
      email?: string;
      /** Format: password */
      password?: string;
    };
    UserRefresh: { [key: string]: unknown };
    UserVerify: {
      user_id?: string;
      otp_id?: string;
    };
    UserReset: {
      /** Format: email */
      email?: string;
    };
    UserUpdateReset: {
      user_id?: string;
      otp_id?: string;
      /** Format: password */
      password?: string;
    };
    PostMachineRequest: {
      /** @enum {string} */
      permission?: "write" | "read";
    };
    PostMachineResponse: {
      key?: string;
      secret?: string;
      organization?: string;
      /** @enum {string} */
      permission?: "write" | "read";
    };
    OrganizationResponse: {
      id?: string;
      name?: string;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      deleted_at?: string | null;
    };
    OrganizationsResponse: {
      organizations?: components["schemas"]["OrganizationResponse"][];
    };
    OrganizationRequest: {
      name?: string;
    };
    UserResponse: {
      id?: string;
      name?: string;
      /** @example xxxxxxxxxxxxxxxxxx */
      organization_id?: string;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      deleted_at?: string | null;
    };
    UsersResponse: {
      users?: components["schemas"]["UserResponse"][];
    };
    InstanceRequest: {
      /** @example xxxxxxxxxxxxxxxxxx */
      database_id?: string;
      /**
       * @description Instance type
       * @default s
       * @example s
       * @enum {string}
       */
      type?: "free" | "s" | "m" | "l";
      /**
       * @description Size of mounted and volume in gb
       * @default 10
       * @example 100
       */
      volume_size?: number;
    };
    InstanceResponse: {
      id?: string;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      deleted_at?: string | null;
      /** @enum {string} */
      status?: "awake" | "asleep";
      /**
       * @description Instance type
       * @default s
       * @example s
       * @enum {string}
       */
      type?: "free" | "s" | "m" | "l";
      server?: {
        id?: string;
      };
      /**
       * @description Size of mounted and volume in gb
       * @default 10
       * @example 100
       */
      volume_size?: number;
    };
    InstancesResponse: {
      instances?: components["schemas"]["InstanceResponse"][];
    };
    SleepAwakeInstance: {
      /** @enum {string} */
      status?: "awake" | "asleep";
    };
    DatabaseRequest: {
      database_name?: string;
    };
    DatabaseResponse: {
      id?: string;
      database_name?: string;
      /** @example xxxxxxxxxxxxxxxxxx */
      organization_id?: string;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      deleted_at?: string | null;
      instances?: components["schemas"]["InstanceResponse"][];
    };
    DatabasesResponse: {
      databases?: components["schemas"]["DatabaseResponse"][];
    };
    /** @description Collection details */
    CollectionRequest: {
      /** @example xxxxxxxxxxxxxxxxxx */
      collection_id?: string;
    };
    CollectionsResponse: {
      collections?: components["schemas"]["CollectionResponse"][];
    };
    CollectionResponse: {
      /** @example xxxxxxxxxxxxxxxxxx */
      collection_id?: string;
    };
    IndexRequest: {
      /** @example xxxxxxxxxxxxxxxxxx */
      field_id?: string;
      /** Format: int64 */
      dimension?: number;
    };
    DocumentRequest: {
      documents?: {
        id?: string;
        /** @example 1,2,3 */
        field?: number[];
      }[];
    } & { [key: string]: unknown };
    DocumentResponse: {
      id?: string;
      /** @example 1,2,3 */
      field?: number[];
    } & { [key: string]: unknown };
    IndexResponse: {
      /** @example xxxxxxxxxxxxxxxxxx */
      collection_id?: string;
      /** @example xxxxxxxxxxxxxxxxxx */
      field_id?: string;
      /** Format: int64 */
      size?: number;
      /** @enum {string} */
      distance_metric?: "euclidean";
      /** Format: int64 */
      dimension?: number;
    };
    IndicesResponse: {
      indices?: components["schemas"]["IndexResponse"][];
    };
    SearchRequest: {
      /**
       * @description Get documents close to the vector. The length of the vector must be equal to the dimension specified in the index
       * @example 1,2,3
       */
      vector?: number[];
      /**
       * @description Maximal number of neighbors to include in response
       * @default 20
       */
      max_neighbors?: number;
      /**
       * @description This parameter specifies the index to perform the query in
       * @example xxxxxxxxxxxxxxxxxx
       */
      field_id?: string;
    };
    SearchResponse: string[];
  };
  parameters: {
    /**
     * @description Your user ID. You can find your user ID in your dashboard
     * @example xxxxxxxxxxxxxxxxxx
     */
    UserId: string;
    /**
     * @description Your organization ID. You can find your organization ID in your dashboard
     * @example xxxxxxxxxxxxxxxxxx
     */
    OrganizationId: string;
    /**
     * @description The ID of the instance
     * @example xxxxxxxxxxxxxxxxxx
     */
    InstanceId: string;
    /**
     * @description The ID of the database
     * @example xxxxxxxxxxxxxxxxxx
     */
    DatabaseId: string;
    /**
     * @description The ID of the collection
     * @example xxxxxxxxxxxxxxxxxx
     */
    CollectionId: string;
    /**
     * @description The ID of the index
     * @example xxxxxxxxxxxxxxxxxx
     */
    IndexId: string;
    /**
     * @description The ID of the index
     * @example xxxxxxxxxxxxxxxxxx
     */
    DocumentId: string;
  };
}

export interface operations {
  /** User login using access and secret token. */
  userLogin: {
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** invalid parameters */
      400: unknown;
      /** invalid input */
      401: unknown;
      /** unauthorized */
      403: unknown;
      /** forbidden */
      405: unknown;
    };
    /** Login email and password in exchange for JWT. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserLogin"];
      };
    };
  };
  /** Machine login using access and secret token. */
  machineLogin: {
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** invalid parameters */
      400: unknown;
      /** invalid input */
      401: unknown;
      /** unauthorized */
      403: unknown;
      /** forbidden */
      405: unknown;
    };
    /** Exchange access and secret token for JSON web token (JWT). */
    requestBody: {
      content: {
        "application/json": components["schemas"]["MachineLogin"];
      };
    };
  };
  /** Create access and secret key for a new machine */
  createMachine: {
    parameters: {
      path: {
        /** Your organization ID. You can find your organization ID in your dashboard */
        organization_id: components["parameters"]["OrganizationId"];
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["PostMachineResponse"];
        };
      };
    };
    /** Newly created organization. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["PostMachineRequest"];
      };
    };
  };
  /** Delete machine account */
  deleteMachine: {
    parameters: {
      path: {
        /** Your organization ID. You can find your organization ID in your dashboard */
        organization_id: components["parameters"]["OrganizationId"];
      };
    };
    responses: {
      /** successful operation */
      200: unknown;
    };
  };
}

export interface external {}
